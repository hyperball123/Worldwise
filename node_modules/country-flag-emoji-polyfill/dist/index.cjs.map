{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { isEmojiSupported } from \"is-emoji-supported\";\n\n/**\n * Injects a style element into the HEAD with a web font with country flags,\n * iff the browser does support emojis but not country flags.\n *\n * @param fontName - Override the default font name (\"Twemoji Country Flags\")\n * @param fontUrl - Override the font URL (defaults to a jsdeliver-hosted)\n *\n * @returns true if the web font was loaded (ie the browser does not support country flags)\n */\nexport function polyfillCountryFlagEmojis(\n  fontName = \"Twemoji Country Flags\",\n  fontUrl = \"https://cdn.jsdelivr.net/npm/country-flag-emoji-polyfill@0.1/dist/TwemojiCountryFlags.woff2\"\n) {\n  if (isEmojiSupported(\"ðŸ˜Š\") && !isEmojiSupported(\"ðŸ‡¨ðŸ‡­\")) {\n    const style = document.createElement(\"style\");\n\n    // I generated the `unicode-range` below using\n    // https://wakamaifondue.com/beta/, which is awesome and it helps make sure\n    // this font is never tried for any character that it does not support.\n    //\n    // See build/make-font.sh for more background why these are the relevant\n    // unicode ranges.\n    //\n    // Also, we're setting `font-display` to \"swap\" because without it, all text\n    // will be invisible during the time between this style tag being injected\n    // and the font having been loaded. This happens because developers will\n    // typically set `Twemoji Country Flags` as the first font in their\n    // `font-family` lists, and the browser tries to prevent a \"flash of\n    // unstyled text\" and therefore hide all text instead of rendering it with\n    // potentially the wrong font. This matters when you're waiting for Open\n    // Sans to load and you dont want your blog to briefly render in Times New\n    // Roman first, but it's actively harmful for apps, where text might briefly\n    // disappear just to load some country flag fallbacks that might not even be\n    // on the page.\n    //\n    // Apparently (when I tested this) browsers aren't smart enough to only do\n    // hide characters that match the not-yet-loaded font's unicode-range.\n    // Setting it to \"swap\" unfortunately makes the browser render eg `â–¡` or\n    // `É´ÊŸ` for country flags until the font is in. But this is way better than\n    // hiding all UI text everywhere :D\n    style.textContent = `@font-face {\n      font-family: \"${fontName}\";\n      unicode-range: U+1F1E6-1F1FF, U+1F3F4, U+E0062-E0063, U+E0065, U+E0067,\n        U+E006C, U+E006E, U+E0073-E0074, U+E0077, U+E007F;\n      src: url('${fontUrl}') format('woff2');\n      font-display: swap;\n    }`;\n    document.head.appendChild(style);\n\n    return true;\n  }\n  return false;\n}\n"],"names":["polyfillCountryFlagEmojis","fontName","fontUrl","isEmojiSupported","style","document","createElement","textContent","head","appendChild"],"mappings":"sEAWgBA,SACdC,EACAC,GAEA,QAFuG,IADvGD,IAAAA,EAAW,8BAC4F,IAAvGC,IAAAA,EAAU,+FAENC,mBAAiB,QAAUA,mBAAiB,QAAS,CACvD,IAAMC,EAAQC,SAASC,cAAc,SAmCrC,OATAF,EAAMG,YACYN,qCAAAA,EAGJC,mKAAAA,EAGdG,wDAAAA,SAASG,KAAKC,YAAYL,IAG3B,EACD,OACD"}